{"version":3,"sources":["components/Mark.js","components/WeatherList.js","components/WeatherContainer.js","components/Addweather.js","App.js","serviceWorker.js","index.js"],"names":["Mark","toggleStar","id","console","log","props","handleStar","isStar","this","index","onClick","className","React","Component","ReactModal","setAppElement","WeatherList","handleOpenModal","setState","show","handleCloseModal","updateList","handleUpdate","deleteAt","deleteList","state","src","alt","city","name","cityTemp","isOpen","type","onChange","e","handleUpdateEvent","WeatherContainer","arrangeArr","weather","map","item","key","unshift","push","arrange","OnUpdate","Addweather","handleCity","getWeatherData","deleteAll","clearUnfave","App","url","api_key","axios","methos","then","response","data","main","temp","deleteBtn","Object","assign","splice","unfaveClear","target","value","newCity","updateData","newWeather","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b4b9ce69.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class Mark extends React.Component {\n  toggleStar = id => {\n    console.log(\"star click\");\n    console.log(this.props);\n    this.props.handleStar(id);\n  };\n\n  // create function that move the clicked star item to the top\n\n  render() {\n    const isStar = this.props.isStar ? \"star\" : \"star_border\";\n    console.log(this.props.index);\n    return (\n      <div>\n        <div>\n          <i onClick={() => this.toggleStar(this.props.index)}\n            className=\"material-icons Star\">{isStar}</i>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Mark from \"./Mark\";\nimport ReactModal from \"react-modal\";\nReactModal.setAppElement(\"body\");\n\nexport default class WeatherList extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      show: false\n    };\n  }\n\n  handleOpenModal = () => {\n    this.setState({ show: true });\n  };\n\n  handleCloseModal = () => {\n    this.setState({ show: false });\n  };\n\n  updateList = id => {\n    this.props.handleUpdate(id);\n  };\n  deleteAt = id => {\n    this.props.deleteList(id);\n  };\n\n  render() {\n    return (\n        <div>\n      <div className=\"list-style\">\n        <img className=\"sunny\" src=\"https://i.gifer.com/ZIZ1.gif\" alt=\"sunny\" />\n        <p className=\"city-name\"> {this.props.city.name}</p>\n        <p className=\"temp\">{this.props.city.cityTemp}Â°c</p>\n        <div>\n          <Mark\n            handleStar={this.props.handleStar}\n            index={this.props.index}\n            isStar={this.props.city.isStar}\n          />\n          {/* {this is where Edit Modal code is} */}\n          <button className=\"btn-1\" onClick={this.handleOpenModal}>Edit</button>\n\n          <ReactModal isOpen={this.state.show} className=\"modal\">\n                <h1>Update City</h1>\n        <input className=\"input-style\" type=\"text\"\n              onChange={e => this.props.handleUpdateEvent(e)}></input>\n\n            <button className=\"btn-1\"\n              onClick={() => this.updateList(this.props.index)}>Update</button>\n\n            <div>\n              <button className=\"close-btn\" onClick={this.handleCloseModal}>Close</button>\n            </div>\n          </ReactModal>\n        </div>\n        <i onClick={() => this.props.deleteList(this.props.index)}\n          className=\"material-icons delete\">delete_forever</i>\n      </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport WeatherList from \"./WeatherList\";\n\nexport default class WeatherContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.arrangeArr = [];\n    this.state = {};\n  }\n  \n  arrange() {\n    this.arrangeArr = [];\n    this.props.weather.map((item, index) => {\n      item.key = index;\n      if (item.isStar) {\n        this.arrangeArr.unshift(item);\n      } else {\n        this.arrangeArr.push(item);\n      }\n    });\n  }\n\n  render() {\n    this.arrange();\n    return (\n      <div className=\"container\">\n        {this.arrangeArr.map((item,index) => {\n          return (\n            <WeatherList\n              key={index}\n              index={item.key}\n              city={item}\n              deleteList={this.props.deleteList}\n              OnUpdate={this.props.OnUpdate}\n              handleUpdate={this.props.handleUpdate}\n              handleUpdateEvent={this.props.handleUpdateEvent}\n              handleStar={this.props.handleStar}\n            />\n          );\n        })}\n        \n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport WeatherContainer from './WeatherContainer'\n\n\n\n\nexport default class Addweather extends React.Component{\n \n    \n\n    render(){\n        // passing props and set button and input on top\n        return(<div className=\"Addweather\">\n        <div className=\"div-style\">\n        <label className=\"label-style\">Enter City</label>\n        <input className=\"input-style\" type=\"text\" onChange={e => this.props.handleCity(e)}></input>\n        <button className=\"btn-1\" onClick={()=> this.props.getWeatherData()}>Add City</button>\n        <button className=\"btn-2\" onClick={()=>this.props.deleteAll()} >Delete All</button>\n        <button className=\"btn-3\" onClick={()=>this.props.clearUnfave()} >Clear Unfavorite</button>\n        </div>\n\n        <WeatherContainer  weather={this.props.weather} \n        deleteList={this.props.deleteList} \n        OnUpdate={this.props.OnUpdate} \n        handleUpdate={this.props.handleUpdate} \n        handleUpdateEvent ={this.props.handleUpdateEvent}\n        handleStar={this.props.handleStar}\n        /> \n        </div>)\n    }\n}","import React from \"react\";\nimport Addweather from \"./components/Addweather\";\nimport \"./App.css\";\n\n\nimport axios from \"axios\";\n//http://api.openweathermap.org/data/2.5/weather?units=metric&q=riyadh&appid=eb5bd4d86c7e903cafc2a54851c97a11\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.api_key = \"eb5bd4d86c7e903cafc2a54851c97a11\";\n    this.unfaveClear=[];\n\n    this.state = {\n      weather: [],\n      \n    };\n  }\n  \n  // get api data to weather and fave state\n  getWeatherData = () => {\n    const url = `http://api.openweathermap.org/data/2.5/weather?units=metric&q=${this.state.city}&appid=${this.api_key}`;\n    axios({\n      methos: \"GET\",\n      url: url\n    }).then(response => {\n      this.setState({\n        weather: [\n          ...this.state.weather,\n          {\n            cityTemp: response.data.main.temp,\n            name: response.data.name,\n            isStar: false\n          }\n        ]\n      });\n    });\n  };\n\n  // delete function for specific item\n\n  deleteList = id => {\n    \n    const deleteBtn = Object.assign([], this.state.weather);\n    deleteBtn.splice(id, 1);\n    this.setState({ weather: deleteBtn });\n  };\n\n  deleteAll =()=>{\n    console.log(\"delete all\")\n    this.setState({weather:[]})\n  }\n\n  clearUnfave=()=>{\n    this.unfaveClear=[];\n    console.log(\"Unfave button\")\n    this.state.weather.map((item,index)=>{\n      item.key=index\n      if (item.isStar) {\n        this.unfaveClear.push(item);\n      } \n      \n    });\n    this.setState({weather:this.unfaveClear})\n  }\n\n\n  // get the input from input  value that's on top  \n  handleCity = e => {\n    this.setState({ city: e.target.value });\n  };\n\n  // get the input from the modal that's inside modal pop up for updating city api\n  handleUpdateEvent = e => {\n    this.setState({ newCity: e.target.value });\n  };\n\n  // get api that has been set by newCity\n  handleUpdate = id => {\n    \n    const updateData = Object.assign([], this.state.weather);\n    const url = `http://api.openweathermap.org/data/2.5/weather?units=metric&q=${this.state.newCity}&appid=${this.api_key}`;\n    axios({\n      methos: \"GET\",\n      url: url\n    }).then(response => {\n     \n\n      updateData[id].name = response.data.name;\n      updateData[id].cityTemp = response.data.main.temp;\n      this.setState({ weather: updateData });\n    });\n  };\n\n  // this set the functoinality of the isStar to move the item on top of the other elements from weather array\n  handleStar = id => {\n  \n    const newWeather = [...this.state.weather];\n    console.log(newWeather, \"handle star\");\n    newWeather[id].isStar = !this.state.weather[id].isStar;\n\n    this.setState({\n      weather: newWeather\n    });\n\n  };\n\n\n  render() {\n    \n    console.log(this.state.weather);\n    return (\n      <div className=\"App\">\n        <h1>\n          <i className=\"material-icons icon\">brightness_7</i>Weather Applicaton\n        </h1>\n\n        <Addweather\n          isStar={this.state.isStar}\n          city={this.state.city}\n          handleCity={this.handleCity}\n          handleUpdate={this.handleUpdate}\n          handleUpdateEvent={this.handleUpdateEvent}\n          getWeatherData={this.getWeatherData}\n          weather={this.state.weather}\n          deleteList={this.deleteList}\n          OnUpdate={this.handleUpdate}\n          handleStar={this.handleStar}\n          deleteAll={this.deleteAll}\n          clearUnfave={this.clearUnfave}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}